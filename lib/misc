os.loadAPI("lib/log")

local function combineLikeItems()
    for i = 1, 16 do
        local det = turtle.getItemDetail(i)

        if det ~= nil and turtle.getItemSpace(i) > 0 then
            for j = i + 1, 16 do
                if turtle.getItemSpace(i) <= 0 then
                    break
                end
                local det2 = turtle.getItemDetail(j)
                if det2 ~= nil and det2.name == det.name then
                    turtle.select(j)
                    turtle.transferTo(i)
                end
            end
        end
    end
end

local function executeChain(swaps)
    while #swaps > 0 do
        local swap = table.remove(swaps, #swaps)
        if turtle.getSelectedSlot() ~= swap.from then
            turtle.select(swap.from)
        end
        turtle.transferTo(swap.to)
    end
end

local function checkItem(item, swaps, items)
    if item.slot == item.newSlot then
        return
    end
    local swap = {
        from = item.slot,
        to = item.newSlot
    }

    table.insert(swaps, swap)
    if turtle.getItemDetail(swap.to) == nil then
        executeChain(swaps)
    else
        local key = -1
        for k, v in pairs(items) do
            if v.slot == swap.to then
                key = k
                break
            end
        end
        if key >= 0 then
            local nextItem = table.remove(items, key)
            checkItem(nextItem, swaps, items)
        else
            turtle.select(swap.from)
            local tempSlot = inv.getEmptySlot()
            turtle.transferTo(tempSlot)
            executeChain(swaps)
            turtle.select(tempSlot)
            turtle.transferTo(swap.to)
        end
    end
end

local function sort()
    local emptySlot = inv.getEmptySlot()
    if emptySlot < 0 then
        log.error("No empty slot, unable to sort")
        return
    end
    local items = {}
    for i = 1, 16 do
        local det = turtle.getItemDetail(i)
        if det ~= nil then
            local item = {
                name = det.name,
                slot = i
            }
            table.insert(items, item)
        end
    end

    table.sort(items, function(t1, t2)
        if t1.name == t2.name then return t1.slot < t2.slot end
        return t1.name < t2.name
    end)

    for k, v in ipairs(items) do v.newSlot = k end

    while #items > 0 do
        local item = table.remove(items, #items)
        swaps = {}
        checkItem(item, swaps, items)
    end
end

function defrag(doSort)
    combineLikeItems()
    if doSort then sort() end
end

function waitForKey(k)
    while true do
        local event, key = os.pullEvent( "key" )
        if key == k then
            return
        end
    end
end

function sign(from, to)
    local delta = to - from
    if delta > 0 then return 1 end
    if delta < 0 then return -1 end
    return 0
end

-- Same as sign, but returns 1 when the difference is 0
-- this is useful for use in a for loop, as the third argument
-- Then, even if from == to, the for loop will always execute 
-- and not get stuck in an infinite loop
-- Ex:    for i = start, end, fromTo(start, end)
function fromTo(from, to)
    if to - from >= 0 then return 1 end
    return -1
end

function countEmptySlots()
    local emptySlots = 0
    for i = 1,16 do
        if turtle.getItemDetail(i) == nil then
            emptySlots = emptySlots + 1
        end
    end
    return emptySlots
end